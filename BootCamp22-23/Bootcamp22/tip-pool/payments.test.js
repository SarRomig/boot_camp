describe("payments test (with setup and tear-down)", function() {
    beforeEach(function () {
      // initialization logic
      //need value to go into each function in: let billAmt = billAmtInput.value;
  tipAmtInput.value = 10;
  billAmtInput.value = 50;
    });

    //submitPaymentInfo() -- this function's job is to add a payment object (using createCurPayment()) to the allPayments object then run appendPaymentTable(curPayment), updateServerTable(), and updateSummary()
    it("should add a payment to allPayments object", function () {
        submitPaymentInfo();   //expecting an object when it's run so run it then check the object-- createCurentPayment has billamt, tipamt, and tipPercent - adding that obect to allPayments
        expect(Object.keys(allPayments).length).toEqual(1);
        expect(allPayments["payment1"].billAmt).toEqual("50");
        expect(allPayments["payment1"].tipAmt).toEqual("10");
        expect(allPayments["payment1"].tipPercent).toEqual(20);
    });
    it("should not add a payment if there's no bill input", function() {
        billAmtInput.value = "";
        tipAmtInput.value = 10;
        submitPaymentInfo();   
        expect(Object.keys(allPayments).length).toEqual(0);
    })
    it("should add curPayment to #paymentTable", function() {
        let curPayment = createCurPayment();
        allPayments["payment"] = curPayment;
        appendPaymentTable(curPayment);  //do what the function does and then check to see that it adds a td to the #paymentTable when all of the above exists
        let tdList = document.querySelectorAll("#paymentTable tbody tr td");
        expect(tdList.length).toEqual(3); //4 when delete button is added
        expect(tdList[0].innerText).toEqual("$50");
        expect(tdList[1].innerText).toEqual("$10");
        expect(tdList[2].innerText).toEqual("20%");
    })

    //createCurPayment() -- this function's job is to take the bill and tip values, see if they exist (if not, it returns), if they exist, then return an object with billamt, tip amt, and tippercent (which calls calculateTipPercent)
    it ("should not generate a current payment, should return undefined if there is no bill value", function() {
        tipAmtInput.value = 10;
        billAmtInput.value = "";
        expect(createCurPayment()).toEqual(undefined);
    });
    it ("should not generate a current payment, should return undefined if there is no tip value", function() {
        tipAmtInput.value = "";
        billAmtInput.value = 50;
        expect(createCurPayment()).toEqual(undefined);
    });

    it("should add a new payment object when all inputs exist", function() {
        let returnedPaymentObject = {
     billAmt: "50",
      tipAmt: "10",
      tipPercent: 20
        }
        expect(createCurPayment()).toEqual(returnedPaymentObject);
    })

  //appendPaymentTable -- this function's job is to create new table rows for each the bill amount, tip amount and tip percentage of the current payment, generated by submit payment info, and append them to the paymentTbody section
    it('should add a new server to allServers on submitServerInfo()', function () {
      
    });
  
    //updateSummary()-- this function's job is to average the 
    it('should add an attribute to the new tr that is created', function () { //you can pass in code for this whole function to use within the expect function 
      
    });
  
  
    afterEach(function() {
      //update all updated objects to equal zero
      //update any changed inputs or htmls to ""
      //update any attributes
      //undo what you already did
    allPayments = {};
    billAmtInput.value = '';
    tipAmtInput.value = '';
    serverTbody.innerHTML = "";
    paymentTbody.innerHTML = "";
    });
  });
  
  
  